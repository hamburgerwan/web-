#此工作流将构建一个docker容器，当推送到“主”分支时，将其发布并部署到腾讯Kubernetes引擎（TKE）。
 #
#要配置此工作流，请执行以下操作：
 #
# 1. 确保您的存储库包含腾讯Kubernetes引擎集群的必要配置，
#包括deployment.yml、kustomization.yml和service.yml等。
 #
# 2. 在工作区中设置秘密：
#-带有腾讯云机密ID的TENCENT_CLOUD_SSECRET_ID
#-带有腾讯云密钥的TENCENT_CLOUD_SECRET_KEY
#-腾讯云账户ID为的TENCENT_CLOUD_ACCOUNT_ID
#-带有TKE注册表密码的TKE_REGISTRY_PASSWORD
 #
# 3. 更改TKE_IMAGE_URL、TKE_REGION、TKE_CLUSTER_ID和DEPLOYMENT_NAME环境变量的值（如下）。

名称 :腾讯Kubernetes引擎

在 :
推 :
分支 : [“主要” ]

#可用于此工作流中所有作业和步骤的环境变量
 环境价值 :
 文件夹_ URL : ccr.ccs.tencentyun.com/demo/mywebapp公司
 TKE_区域 :阿普-广州
TKE_集群_ID : cls-mywebapp
部署_名称 : tke试验

权限 :
目录 :阅读

工作 :
建立-发布-部署 :
名称 :设置、生成、发布和部署
运行 :ubuntu最新
环境 :生产
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    # Build
    - name: Build Docker image
      run: |
        docker build -t ${TKE_IMAGE_URL}:${GITHUB_SHA} .

    - name: Login TKE Registry
      run: |
        docker login -u ${{ secrets.TENCENT_CLOUD_ACCOUNT_ID }} -p '${{ secrets.TKE_REGISTRY_PASSWORD }}' ${TKE_IMAGE_URL}

    # Push the Docker image to TKE Registry
    - name: Publish
      run: |
        docker push ${TKE_IMAGE_URL}:${GITHUB_SHA}

    - name: Set up Kustomize
      run: |
        curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: Set up ~/.kube/config for connecting TKE cluster
      uses: TencentCloud/tke-cluster-credential-action@v1
      with:
        secret_id: ${{ secrets.TENCENT_CLOUD_SECRET_ID }}
        secret_key: ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}
        tke_region: ${{ env.TKE_REGION }}
        cluster_id: ${{ env.TKE_CLUSTER_ID }}

    - name: Switch to TKE context
      run: |
        kubectl config use-context ${TKE_CLUSTER_ID}-context-default

    # Deploy the Docker image to the TKE cluster
    - name: Deploy
      run: |
        ./kustomize edit set image ${TKE_IMAGE_URL}:${GITHUB_SHA}
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/${DEPLOYMENT_NAME}
        kubectl get services -o wide
